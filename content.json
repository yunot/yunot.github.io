{"meta":{"title":"Yuno's Blog","subtitle":null,"description":null,"author":"Yuno","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"第一次前后端分离（Vue+SpringBoot）","date":"2019-10-29T16:37:38.234Z","updated":"2019-10-29T16:43:25.103Z","comments":true,"path":"2019/10/30/第一次前后端分离（Vue+SpringBoot）/","link":"","permalink":"http://yoursite.com/2019/10/30/第一次前后端分离（Vue+SpringBoot）/","excerpt":"","text":"title: 第一次前后端分离date: 2019-10-30tags: Vue,SpringBoot 第一次前后端分离（Vue+SpringBoot）[TOC] 背景： 前后端项目已经创建成功。现使用反向代理，即 前端的请求通过前端服务器转发给后端，前后端之间通过 RESTful API 传递 JSON 数据进行交流。 本次实验将编写一个登录模块来体现简单的前后端分离。 一. 前端部分1. 前端页面开发1.1 Login.Vue 打开WebStorm里新建的Vue-Demo项目，在src\\components目录下New-&gt;Vue Component,命名为Login。 Login里的代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;template&gt; &lt;div&gt; 用户名:&lt;input type=&quot;text&quot; v-model=&quot;loginForm.username&quot; placeholder=&quot;请输入用户名&quot;/&gt; &lt;br&gt;&lt;br&gt; 密码： &lt;input type=&quot;password&quot; v-model=&quot;loginForm.password&quot; placeholder=&quot;请输入密码&quot;/&gt; &lt;br&gt;&lt;br&gt; &lt;button v-on:click=&quot;login&quot;&gt;登录&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: &apos;Login&apos;, data () &#123; return &#123; loginForm: &#123; username: &apos;&apos;, password: &apos;&apos; &#125;, responseResult: [] &#125; &#125;, methods: &#123; login () &#123; this.$axios .post(&apos;/login&apos;, &#123; username: this.loginForm.username, password: this.loginForm.password &#125;) .then(successResponse =&gt; &#123; if (successResponse.data.code === 200) &#123; this.$router.replace(&#123;path: &apos;/index&apos;&#125;) &#125; &#125;) .catch(failResponse =&gt; &#123; &#125;) &#125; &#125; &#125;&lt;/script&gt; template标签中是一个简单的登录界面，标签中的methods里定义了login的点击方法（v-on:click=\"login\"），向后端/login接口发送数据，如果获得了成功的响应，则能跳至/index页面。 1.2 MainIndex.Vue在src\\components目录下New->Directory,命名为home，在home目录下New->Vue Component,命名为MainIndex。 代码如下： 123456789101112131415&lt;template&gt; &lt;div&gt; 恭喜你完成了你的第一个前后端分离项目！ &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: &apos;AppIndex&apos; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 2. 前端相关配置2.1 设置反向代理 修改 src\\main.js 代码如下： 因为使用了新的模块 axios，所以需要进入到项目文件夹中，需执行 npm install --save axios，以安装这个模块。 1234567891011121314151617import Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;// 设置反向代理，前端请求默认发送到 http://localhost:8443/apivar axios = require(&apos;axios&apos;)axios.defaults.baseURL = &apos;http://localhost:8443/api&apos;// 全局注册，之后可在其他组件中通过 this.$axios 发送数据Vue.prototype.$axios = axiosVue.config.productionTip = false/* eslint-disable no-new */new Vue(&#123; el: &apos;#app&apos;, router, components: &#123; App &#125;, template: &apos;&lt;App/&gt;&apos;&#125;) 2.2 配置页面路由 修改 src\\router\\index.js 代码如下 ： 1234567891011121314151617181920212223import Vue from &apos;vue&apos;import Router from &apos;vue-router&apos;// 导入刚才编写的组件import AppIndex from &apos;@/components/home/AppIndex&apos;import Login from &apos;@/components/Login&apos;Vue.use(Router)export default new Router(&#123; routes: [ // 下面都是固定的写法 &#123; path: &apos;/login&apos;, name: &apos;Login&apos;, component: Login &#125;, &#123; path: &apos;/index&apos;, name: &apos;MainIndex&apos;, component: MainIndex &#125; ]&#125;) 2.3 跨域支持为了让后端能够访问到前端的资源，需要配置跨域支持。 在 config\\index.js 中，找到 proxyTable 位置，修改为以下内容： 123456789proxyTable: &#123; &apos;/api&apos;: &#123; target: &apos;http://localhost:8443&apos;,//自行设置的端口 changeOrigin: true, pathRewrite: &#123; &apos;^/api&apos;: &apos;&apos; &#125; &#125;&#125; 3. 运行项目 执行 npm run dev，或双击 dev（start 也一样）脚本，查看登录页面效果。 二. 后端部分1. Pojo(User 类) 在 Login.vue 中，前端发送数据的代码段为 ： 1234.post(&apos;/login&apos;, &#123; username: this.loginForm.username, password: this.loginForm.password &#125;) 所以，在后端创建一个形式一致的类来接收这个JS对象。 在src\\main\\java\\com\\example\\springdemo1目录下New->Directory，pojo.然后New->Java Class，User类，代码如下： 12345678910111213141516171819202122232425262728293031package com.example.springdemo1.pojo;public class User &#123; int id; String username; String password; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125;&#125; 2. Result 类依旧在src\\main\\java\\com\\example\\springdemo1目录下New->Directory，result. New->Java Class，Result类。Result类用来构造响应码。代码如下： 12345678910111213141516171819package com.example.springdemo1.result;public class Result &#123; //响应码 private int code; public Result(int code) &#123; this.code = code; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125;&#125; 3. LoginController在src\\main\\java\\com\\example\\springdemo1目录下New->Directory，controller. New->JavaClass，LoginController. 其逻辑为，Controller 是对响应进行处理的部分。这里我们设定账号是 admin，密码是 123456，分别与接收到的 User 类的 username 和 password 进行比较。 根据结果返回不同的 Result，即不同的响应码。前端如果接收到成功的响应码（200），则跳转到 /index 页面。代码如下： 12345678910111213141516171819202122232425262728293031package com.example.springdemo1.result;import com.example.springdemo1.result.Result;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import org.springframework.web.util.HtmlUtils;import com.example.springdemo1.pojo.User;import java.util.Objects;@Controllerpublic class LoginController &#123; @CrossOrigin @PostMapping(value = \"api/login\") @ResponseBody public Result login(@RequestBody User requestUser) &#123; // 对 html 标签进行转义，防止 XSS 攻击 String username = requestUser.getUsername(); String password = requestUser.getPassword(); username = HtmlUtils.htmlEscape(username); if (!Objects.equals(\"admin\", username) || !Objects.equals(\"123456\", password) &#123; String message = \"账号密码错误\"; System.out.println(\"test\"); return new Result(400); &#125; else &#123; return new Result(200); &#125; &#125;&#125; 4. 配置端口 最后，在 src\\main\\resources 文件夹下找到 application.properties 文件配置端口，即加上 server.port=8443 三. 运行项目 同时运行前端和后端项目，访问 localhost:8080/#/login，输入用户名 admin，密码 123456 点击确定，成功进入 localhost:8080/#/index","categories":[],"tags":[]},{"title":"What's going on??","slug":"thoughts","date":"2019-10-08T09:48:01.000Z","updated":"2019-10-08T10:06:09.260Z","comments":true,"path":"2019/10/08/thoughts/","link":"","permalink":"http://yoursite.com/2019/10/08/thoughts/","excerpt":"","text":"clearly i have no idea what’s going on here…i took my shot at the holidays and tried to enjoy the warmth and comfort that family brought me.after all that has gone,i just again step into the dilemma.the main reason why i am puzzled and struggling and hesitating is that i need a guidance line to make me feel that i am on the way doing something.i even doubt myself whether it’s worthy or not choosing to stay with my grandparents for the last few days.ok just for a moment.The teacher’s right,i am too passive at this point of my life. i kind of let those things choose me which is not a bright choice for me.but how can i be more active and positive? remains “?”.what’s going on????i don’t even know a thing.","categories":[],"tags":[{"name":"thoughts","slug":"thoughts","permalink":"http://yoursite.com/tags/thoughts/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-04T06:27:20.488Z","updated":"2019-10-04T06:27:20.488Z","comments":true,"path":"2019/10/04/hello-world/","link":"","permalink":"http://yoursite.com/2019/10/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}